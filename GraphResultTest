 import React, { useState } from 'react';
import Pie, { ProvidedProps, PieArcDatum } from '@visx/shape/lib/shapes/Pie';
import { scaleOrdinal } from '@visx/scale';
import { Group } from '@visx/group';
import { GradientPinkBlue } from '@visx/gradient';
import { animated, useTransition, interpolate } from 'react-spring';

interface dataResults {
 status: string;
 value: number;
}

const result: dataResults[] = [
  {
 status: "empty",
 value: 1.5166666666666666
  },
  {
 status: "occupied",
 value: 3.1666666666666665
  },
  {
 status: "break",
 value: 0.5
  }
];

const resultnames =['empty','occupied','break'];
const usage = (d: dataResults) => d.value;
const getBrowserColor = scaleOrdinal({
 domain: resultnames,
 range: [
 'rgba(255,255,255,0.7)',
 'rgba(255,255,255,0.6)',
 'rgba(255,255,255,0.5)',
 'rgba(255,255,255,0.4)'
  ],
});
const defaultMargin = { top: 20, right: 20, bottom: 20, left: 20 };
export type PieProps = {
 width: number;
 height: number;
 margin?: typeof defaultMargin;
 animate?: boolean;
};
export default function Example({
 width,
 height,
 margin = defaultMargin,
 animate = true,
}: PieProps) {
 const [selectedresult, setSelectedResult] = useState<string | null>(null);
if (width < 10) return null;
const innerWidth = width - margin.left - margin.right;
 const innerHeight = height - margin.top - margin.bottom;
 const radius = Math.min(innerWidth, innerHeight) / 2;
 const centerY = innerHeight / 2;
 const centerX = innerWidth / 2;
 const donutThickness = 40;
 return (
 <svg width={400} height={600}>
 <GradientPinkBlue id="visx-pie-gradient" />
 <rect rx={14} width={width} height={height} fill="url('#visx-pie-gradient')" />
 <Group top={centerY + margin.top} left={centerX + margin.left}>
 <Pie
 data={
 result
 }
 pieValue={usage}
 outerRadius={radius}
 innerRadius={radius - donutThickness}
 cornerRadius={3}
 padAngle={0.005}
 >
 {pie => (
 <AnimatedPie<dataResults>
 {...pie}
 animate={animate}
 getKey={arc => arc.data.status}
 onClickDatum={({ data: { status } }) =>
 animate &&
 setSelectedResult(selectedresult && selectedresult === status ? null : status)
 }
 getColor={arc => getBrowserColor(arc.data.status)}
 /> )}
 </Pie>
 </Group>
 {animate && (
 <text
 textAnchor="end"
 x={width - 16}
 y={height - 16}
 fill="white"
 fontSize={11}
 fontWeight={300}
 pointerEvents="none">
          Click segments to update
 </text>
      )}
 </svg>
  );
}
type AnimatedStyles = { startAngle: number; endAngle: number; opacity: number };

const fromLeaveTransition = ({ endAngle }: PieArcDatum<any>) => ({
 startAngle: endAngle > Math.PI ? 2 * Math.PI : 0,
 endAngle: endAngle > Math.PI ? 2 * Math.PI : 0,
 opacity: 0,
});
const enterUpdateTransition = ({ startAngle, endAngle }: PieArcDatum<any>) => ({
 startAngle,
 endAngle,
 opacity: 1,
});

type AnimatedPieProps<Datum> = ProvidedProps<Datum> & {
 animate?: boolean;
 getKey: (d: PieArcDatum<Datum>) => string;
 getColor: (d: PieArcDatum<Datum>) => string;
 onClickDatum: (d: PieArcDatum<Datum>) => void;
 delay?: number;
};

function AnimatedPie<Datum>({
 animate,
 arcs,
 path,
 getKey,
 getColor,
 onClickDatum,
}: AnimatedPieProps<Datum>) {
 const transitions = useTransition<PieArcDatum<Datum>, AnimatedStyles>(
 arcs,
 getKey,
    {
 from: animate ? fromLeaveTransition : enterUpdateTransition,
 enter: enterUpdateTransition,
 update: enterUpdateTransition,
 leave: animate ? fromLeaveTransition : enterUpdateTransition,
    },
  );
 return (
 <>
 {transitions.map(
        ({
 item: arc,
 props,
 key,
        }: {
 item: PieArcDatum<Datum>;
 props: AnimatedStyles;
 key: string;
        }) => {
 const [centroidX, centroidY] = path.centroid(arc);
 const hasSpaceForLabel = arc.endAngle - arc.startAngle >= 0.1;
return (
 <g key={key}>
 <animated.path
 // compute interpolated path d attribute from intermediate angle values
 d={interpolate([props.startAngle, props.endAngle], (startAngle, endAngle) =>
 path({
                    ...arc,
 startAngle,
 endAngle,
                  }),
                )}
 fill={getColor(arc)}
 onClick={() => onClickDatum(arc)}
 onTouchStart={() => onClickDatum(arc)}
 />
 {hasSpaceForLabel && (
 <animated.g style={{ opacity: props.opacity }}>
 <text
 fill="white"
 x={centroidX}
 y={centroidY}
 dy=".33em"
 fontSize={9}
 textAnchor="middle"
 pointerEvents="none"
 >
 {getKey(arc)}
 </text>
 </animated.g>
              )}
 </g>
          );
        },
      )}
 </>
  );
}
